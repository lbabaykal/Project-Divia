PHP
//Теранарный оператор
$saved = // Присваивание значения переменной $saved...
$saved >= $new // Сравнение $saved и $new
? // Если сравнение выдает истинный результат...
$saved // ...ей присваивается текущее значение $saved
: // Если сравнение выдает ложный результат...
$new; // ...ей присваивается значение переменной $new


//---------------------------------------------
$kek = [
    'qwer' => '1111',
    'tyui' => '2222',
    'asdf' => '3333',
    'ghjk' => '4444'
];
extract($kek, EXTR_PREFIX_ALL, 'lol');
echo $lol_qwer;
//---------------------------------------------


preg_match -
this->
self->

public - 
protected - 
private - 
__construct() -
__destruct() -
extends наследование в классе
parent:: наследование метода родителя в extends
static:: 
& - Перед переменной работает как ссылка
instanceof - 
explode() - 
implode() - 
trim() - Удаляет пробелы по краям
htmlentities() заменяет по возможности все символы эквивалентными сущностями HTML
htmlspecialchars()
strip_tags() удаляет теги HTML из строки
parse_url() возвращает массив компонентов URL-адреса
password_hash() - 
array() - 
unset() - 
count() - 



$Config = array(
    'online'      => 'true',
    'title'       => 'Title',
    'description' => 'Description',
    'keywords'    => 'Keywords',
    'date_zone'   => 'Europe/Moscow',
    'templates'   => 'AnoTheR',
    'short_news'  => '20'
);

echo '<pre>';
print_r(array_keys($Config));
$array_keys = array_keys($Config);
print_r(array_values($Config));
$array_values = array_values($Config);

print_r(implode( ',', $array_keys));

print_r(implode( ',', $array_values));



foreach ($names as $key => $value) {
echo "<b>$value $key</b><br>";
} 

switch(выражение) {
 case значение1: команды1; [break;]
 case значение2: команды2; [break;]
 case значениеN: командыN; [break;]
 [default: команды_по_умолчанию; [break]]
} 

$x="Яблоко";
switch ($x) {
    case "Яблоко":
    echo "Это Яблоко";
    break;
    case "Груша":
    echo "Это Груша";
    break;
    case "Арбуз":
    echo "Это Арбуз";
    break;
 } 









SELECT ('столбцы или * для выбора всех столбцов; обязательно')
FROM ('таблица; обязательно')
WHERE ('условие/фильтрация, например, city = 'Moscow'; необязательно')
GROUP BY ('столбец, по которому хотим сгруппировать данные; необязательно')
HAVING ('условие/фильтрация на уровне сгруппированных данных; необязательно')
ORDER BY ('столбец, по которому хотим отсортировать вывод; необязательно')


SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;