<?php

namespace App\Controllers;

use App\App;
use App\Controller;
use App\Models\Static_PageModel;
use App\View;

class Static_PageController extends Controller
{
    public function actionIndex()
    {
        $NamePage =  $this->route['name'];
        $DataStaticPage = Static_PageModel::getStaticPage($NamePage);
        if (!$DataStaticPage) {
            $this->Not_Found_404();
        }

        $DataMain = [
            'title' => 'üå∏' . App::getConfigSite('site_name') . 'üå∏' . $DataStaticPage['name'] . 'üìúÔ∏é',
            'description' => '',
            'template'=> App::getConfigSite('dir_template'),
            'login' => LoginController::login()
        ];

        $templateStatic_Page = (new View)->render_v3(TEMPLATES_DIR . '/Static_Page', $DataStaticPage);
        $DataMain += [
            'CONTENT' => $templateStatic_Page
        ];

        return (new View)->render_v3(TEMPLATES_DIR . '/Main', $DataMain);
    }

    //================TEMPLATES================
    public function actionTemplate_Static_Page_Add(): string
    {
        $this->CheckAccess();
        return (new View)->render_v3(ADMIN_TEMPLATES_DIR . '/AJAX/Static_Page_Add');
    }

    public function actionTemplate_Static_Page_Edit(): string
    {
        $this->CheckAccess();
        $id_StaticPage = $this->sanitizeInt($_POST['id_StaticPage']);
        $dataStaticPage = Static_PageModel::getOneStaticPage($id_StaticPage);
        if (!$dataStaticPage) {
            return $this->Not_Found_404();
        }
        return (new View)->render_v3(ADMIN_TEMPLATES_DIR . '/AJAX/Static_Page_Edit', $dataStaticPage);
    }

    public function actionTemplate_Static_Page_Delete(): string
    {
        $this->CheckAccess();
        $id_StaticPage = $this->sanitizeInt($_POST['id_StaticPage']);
        $dataStaticPage = Static_PageModel::getOneStaticPage($id_StaticPage);
        if (!$dataStaticPage) {
            return $this->Not_Found_404();
        }
        return (new View)->render_v3(ADMIN_TEMPLATES_DIR . '/AJAX/Static_Page_Delete', $dataStaticPage);
    }

    //================ACTIONS================
    public function actionStatic_Page_Add(): string
    {
        $this->CheckAccess();

        $answer = [ 'success' => 'No'];
        if (!empty($_POST)) {
            extract($_POST, EXTR_SKIP);

            if (!isset($name, $name_eng, $description)) {
                $answer['text'] = '–ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.';
            } else {
                $name = $this->sanitizeString($name);
                $name_eng = $this->sanitizeString($name_eng);
                $description = $this->sanitizeString($description);

                if ($name == '') {
                    $answer['text'] = '–í–≤–µ–¥–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏–µ!';
                } elseif (mb_strlen($name) > 50) {
                    $answer['text'] = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤!';
                } elseif ($name_eng == '') {
                    $answer['text'] = '–í–≤–µ–¥–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º!';
                } elseif (mb_strlen($name_eng) > 50) {
                    $answer['text'] = '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤!';
                } else {
                    $data = [
                        'name' => $name,
                        'name_eng' => $name_eng,
                        'description' => $description,
                    ];
                    Static_PageModel::insertStaticPage($data);
                    $answer['success'] = 'Yes';
                    $answer['text'] = '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!';
                }
            }
        } else {
            $answer['text'] = '–ü—Ä–æ–±–ª–µ–º—ã —Ä–∞–±–æ—Ç—ã AJAX.';
        }
        return json_encode($answer);
    }

    public function actionStatic_Page_Edit(): string
    {
        $this->CheckAccess();
        $answer = [ 'success' => 'No'];
        if (!empty($_POST)) {
            extract($_POST, EXTR_SKIP);

            if ( !isset($id_StaticPage, $name, $name_eng, $description) ) {
                $answer['text'] = '–ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.';
            } else {
                $id_StaticPage = $this->sanitizeInt($id_StaticPage);
                $name = $this->sanitizeString($name);
                $name_eng = $this->sanitizeString($name_eng);
                $description = $this->sanitizeString($description);

                if ($name == '') {
                    $answer['text'] = '–í–≤–µ–¥–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏–µ!';
                } elseif (mb_strlen($name) > 50) {
                    $answer['text'] = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤!';
                } elseif ($name_eng == '') {
                    $answer['text'] = '–í–≤–µ–¥–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º!';
                } elseif (mb_strlen($name_eng) > 50) {
                    $answer['text'] = '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤!';
                } else {
                    $dataSet = [
                        'name' => $name,
                        'name_eng' => $name_eng,
                        'description' => $description
                    ];
                    $dataWhere = [
                        'id_static_page' => $id_StaticPage
                    ];
                    Static_PageModel::updateStaticPage($dataSet, $dataWhere);
                    $answer['success'] = 'Yes';
                    $answer['text'] = '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!';
                }
            }
        } else {
            $answer['text'] = '–ü—Ä–æ–±–ª–µ–º—ã —Ä–∞–±–æ—Ç—ã AJAX.';
        }
        return json_encode($answer);
    }

    public function actionStatic_Page_Delete(): string
    {
        $this->CheckAccess();
        $answer = [ 'success' => 'No'];

        if (!empty($_POST)) {
            extract($_POST, EXTR_SKIP);

            if ( !isset($id_StaticPage) ) {
                $answer['text'] = '–ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.';
            }
            else {
                $id_StaticPage = $this->sanitizeInt($id_StaticPage);

                if ( !Static_PageModel::getOneStaticPage($id_StaticPage) ) {
                    $answer['text'] = '–¢–∞–∫–æ–π –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!';
                }
                else {
                    Static_PageModel::deleteStaticPage(['id_static_page' => $id_StaticPage]);
                    $answer['success'] = 'Yes';
                    $answer['text'] = '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞!';
                }
            }
        }
        else {
            $answer['text'] = '–ü—Ä–æ–±–ª–µ–º—ã —Ä–∞–±–æ—Ç—ã AJAX.';
        }
        return json_encode($answer);
    }

}















